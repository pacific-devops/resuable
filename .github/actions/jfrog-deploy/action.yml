name: "Reusable JFrog Deployment with Config Files"
description: "Validate repo, domain, and package, then deploy artifacts to JFrog"

inputs:
  package:
    description: "The package type (e.g., maven, generic, docker)"
    required: true
  domain:
    description: "Enter the domain name"
    required: true
  team:
    description: "Enter the team name"
    required: true

outputs:
  jfrog_repo:
    description: "JFrog repository to deploy to"
  team:
    description: "Team for deployment"

runs:
  using: "composite"
  steps:
  
    # Step 1: Checkout the action repository (to get config files)
    - name: Checkout action repository (to get config files)
      uses: actions/checkout@v4
      with:
        repository: pacific-devops/resuable  # Adjust to your actual repository
        path: master  # Adjust this path based on your folder structure

    # Step 2: List the files to ensure config files are present
    - name: List files for debugging
      run: |
        ls -la master/config/repo/
      shell: bash

    # Step 3: Get GitHub repository name dynamically
    - name: Get GitHub repository name dynamically
      run: |
        repo_full_name="${{ github.repository }}"
        repo=$(echo $repo_full_name | cut -d'/' -f2)
        echo "REPO_NAME=$repo" >> $GITHUB_ENV
      shell: bash

    # Step 4: Validate repository, domain, and package for multiple mappings
    - name: Validate repository, domain, and package
      run: |
        repo="${{ env.REPO_NAME }}"
        package="${{ inputs.package }}"
        domain="${{ inputs.domain }}"
        team="${{ inputs.team }}"

        found=false
        correct_domain=false

        # Print for debugging
        echo "Searching for domain: $domain and package: $package in repo: $repo"

        # Loop through all JSON files in the master/config/repo folder
        for file in master/config/repo/*.json; do
          echo "Searching in $file"

          # Check if the repo exists in the current file (domain mapping)
          repo_domains=$(jq -r --arg repo "$repo" '.repositories[$repo].domains[]' "$file")

          if [[ "$repo_domains" != "" && "$repo_domains" != "null" ]]; then
            echo "Found repository $repo in $file with domains: $repo_domains"

            # Check if the domain matches any of the valid domains
            for mapped_domain in $repo_domains; do
              if [[ "$mapped_domain" == "$domain" ]]; then
                echo "Domain matches: $mapped_domain"

                # Check the package mapping for the given domain in package-mapping.json
                jfrog_repo=$(jq -r --arg domain "$domain" --arg package "$package" '.domain[$domain][$package]' master/config/repo/package-mapping.json)

                if [[ "$jfrog_repo" != "null" && "$jfrog_repo" != "" ]]; then
                  found=true
                  correct_domain=true
                  echo "Found JFrog repository for $repo with $package in $file: $jfrog_repo"
                  break
                else
                  echo "Package $package not found for domain $domain in package-mapping.json"
                fi
              fi
            done
          else
            echo "Repository $repo not found in $file"
          fi
        done

        # If the repository, domain, or package were not found in any file, exit with an error
        if [[ "$correct_domain" == "false" ]]; then
          echo "Repository $repo was found, but domain does not match. No deployment allowed."
          exit 1
        fi

        if [[ "$found" == "false" ]]; then
          echo "Repository $repo or package $package is not allowed to deploy. No mapping found in any file."
          exit 1
        fi

        echo "JFrog repository for $domain and $package is $jfrog_repo"
        echo "JFROG_REPO=$jfrog_repo" >> $GITHUB_ENV
        echo "TEAM=$team" >> $GITHUB_ENV
      shell: bash
