name: Reusable Deployment Workflow

on:
  workflow_call:
    inputs:
      technology:
        description: "Enter the technology (e.g., maven, generic, dev)"
        required: true
        type: string
      team:
        description: "Enter the team name"
        required: true
        type: string
      domain:
        description: "Enter the domain name"
        required: true
        type: string
        
permissions:
  id-token: write
  contents: write
  
jobs:
  check-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Checkout reusable workflow repository (to get config)
      uses: actions/checkout@v4
      with:
          repository: pacific-devops/resuable  
          path: master
          fetch-depth: 1
    - name: Copy config file from reusable workflow
      run : |
            ls -la
            mv master/config/repo/repo-mapping.json  ./
            ls -la 

    - name: Get GitHub repository name dynamically from calling repo
      id: get_repo_name
      run: |
        repo_full_name="${{ github.repository }}"  # This gives owner/repo
        repo=$(echo $repo_full_name | cut -d'/' -f2)  # Extract just the repo part
        echo "Repository name is: $repo"
        echo "REPO_NAME=$repo" >> $GITHUB_ENV
        
    - name: Read repository mapping file and determine JFrog repo based on technology
      id: read_mapping
      run: |
        repo="${{ env.REPO_NAME }}"
        technology="${{ inputs.technology }}"
        team="${{ inputs.team }}"  # Get the team name input

        # Read the mapping from the file and extract the relevant JFrog repository for the given technology
        domain=$(jq -r --arg repo "$repo" '.repositories[$repo].domain' repo-mapping.json)
        jfrog_repo=$(jq -r --arg repo "$repo" --arg tech "$technology" '.repositories[$repo].technologies[$tech]' repo-mapping.json)

        if [[ "$jfrog_repo" == "null" ]]; then
          echo "Repository $repo or technology $technology is not allowed to deploy. No mapping found."
          exit 1
        fi

        echo "Domain for $repo is $domain"
        echo "JFrog repository for $repo with technology $technology is $jfrog_repo"
        echo "Team name is $team"
        echo "DOMAIN=$domain" >> $GITHUB_ENV
        echo "JFROG_REPO=$jfrog_repo" >> $GITHUB_ENV
        echo "TEAM=$team" >> $GITHUB_ENV

  deploytest:
    runs-on: ubuntu-latest
    needs: [check-and-deploy]
    steps:
    - name: JFrog Setup
      id: setup-cli
      uses: jfrog/setup-jfrog-cli@v4.2.2
      env:
        JF_URL: ${{ vars.JF_URL }} # This should be the base URL of your Artifactory
      with:
        oidc-provider-name: gittest
        oidc-audience: git-aud

    - name: Upload artifacts
      run : |
        touch hello.txt
        jfrog_repo="${{ env.JFROG_REPO }}"
        team="${{ env.TEAM }}"
        jf rt upload "hello.txt" --repo=$jfrog_repo/$team/
