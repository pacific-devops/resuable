name: Reusable Deployment Workflow

on:
  workflow_call:
    inputs:
      package:
        description: "Enter the package (e.g., maven, generic, dev)"
        required: true
        type: string
      team:
        description: "Enter the team name"
        required: true
        type: string
      domain:
        description: "Enter the domain name"
        required: true
        type: string
        
permissions:
  id-token: write
  contents: write
  
jobs:
  check-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Checkout reusable workflow repository (to get config)
      uses: actions/checkout@v4
      with:
          repository: pacific-devops/resuable  
          path: master
          fetch-depth: 1
   # - name: Copy config file from reusable workflow
    #  run : |
    #        ls -la
     #       mv master/config/repo/repo-mapping.json  ./
      #      ls -la 
    - name: Get GitHub repository name dynamically
      run: |
        repo_full_name="${{ github.repository }}"  # This gives owner/repo
        repo=$(echo $repo_full_name | cut -d'/' -f2)  # Extract just the repo part
        echo "Repository name is: $repo"
        echo "REPO_NAME=$repo" >> $GITHUB_ENV

    - name: Validate repository, domain, and package across all JSON files
      run: |
        repo="${{ env.REPO_NAME }}"
        package="${{ inputs.package }}"
        domain="${{ inputs.domain }}"
        team="${{ inputs.team }}"

        found=false

        # Loop through all JSON files in the master/config/repo folder
        for file in master/config/repo/*.json; do
        echo "Searching in $file"

        # Check if the repo exists in the current file
        repo_domain=$(jq -r --arg repo "$repo" '.repositories[$repo].domain' "$file")

        # If the repository is found in the current file, proceed to domain check
        if [[ "$repo_domain" != "" && "$repo_domain" != "null" ]]; then

        # Check if the domain matches
        if [[ "$repo_domain" != "$domain" ]]; then
          echo "Domain mismatch: expected $repo_domain, but received $domain for repository $repo in $file"
          continue
        fi

        # Check the package mapping for the given domain in package-mapping.json
        jfrog_repo=$(jq -r --arg domain "$domain" --arg package "$package" '.domains[$domain][$package]' master/config/repo/package-mapping.json)
        
        # If the package is found, mark as found and break the loop
        if [[ "$jfrog_repo" != "null" && "$jfrog_repo" != "" ]]; then
          found=true
          echo "Found JFrog repository for $repo and $package in $file: $jfrog_repo"
          break
        else
          echo "Package $package not found for domain $domain in $file"
        fi
         else
        echo "Repository $repo not found in $file"
        fi
        done

        # If the repository, domain, or package were not found in any file, exit with an error
        if [[ "$found" == "false" ]]; then
        echo "Repository $repo or package $package is not allowed to deploy. No mapping found in any file."
        exit 1
        fi

        echo "JFrog repository for $domain and $package is $jfrog_repo"
        echo "JFROG_REPO=$jfrog_repo" >> $GITHUB_ENV
        echo "TEAM=$team" >> $GITHUB_ENV
        
    - name: JFrog Setup
      id: setup-cli
      uses: jfrog/setup-jfrog-cli@v4.2.2
      env:
        JF_URL: ${{ vars.JF_URL }} # This should be the base URL of your Artifactory
      with:
        oidc-provider-name: gittest
        oidc-audience: git-aud

    - name: Upload artifacts
      run : |
        touch hello.txt
        jfrog_repo="${{ env.JFROG_REPO }}"
        team="${{ env.TEAM }}"
        jf rt upload "hello.txt" "$jfrog_repo/$team/"

